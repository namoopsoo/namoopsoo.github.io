<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Handy on My blog</title><link>https://michal.piekarczyk.xyz/handy/</link><description>Recent content in Handy on My blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://michal.piekarczyk.xyz/handy/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://michal.piekarczyk.xyz/handy/aws/athena/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/aws/athena/</guid><description>This may apply to Athena and or prestodb in general
array empty? Per stackoverflow learned the name for this in the docs is cardinality select cardinality(array[]) = 0; This cannot be applied to the output of a json_extract(json_parse(data), '$.blah.flah.clah') since cardinality() takes ARRAY and not JSON. However, that JSON can be cast. For example, if '$.blah.flah.clah' is like [{&amp;quot;hi&amp;quot;: &amp;quot;there&amp;quot;}, {&amp;quot;so&amp;quot;: &amp;quot;then&amp;quot;}], then this cardinality(cast(json_extract(json_parse(what), &amp;#39;$.blah.flah.clah&amp;#39;) as array(map(varchar, varchar)))) will produce the length of those arrays.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/aws/lambda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/aws/lambda/</guid><description>Make a zip file for a lambda layer From a well written reference here : adjust the python version as needed #!/bin/bash export LIB_DIR=&amp;#34;python&amp;#34; rm -rf ${LIB_DIR} &amp;amp;&amp;amp; mkdir -p ${LIB_DIR} docker run --rm -v $(pwd):/foo -w /foo lambci/lambda:build-python3.8 \ pip install -r requirements.txt -t ${LIB_DIR} zip -r layer.zip python And I like to use vim layer.zip to look at the contents</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/atom-vec-and-while-loop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/atom-vec-and-while-loop/</guid><description>atom vec [] and while loop&amp;hellip; (let [results-atom (atom [])] ; ; (println &amp;#34;elements: &amp;#34; (count @results-atom)) ; (swap! results-atom conj &amp;#34;hi&amp;#34;) ;results-atom (while (&amp;lt; (count @results-atom) 3) (do (println &amp;#34;doing&amp;#34;) ; insert (swap! results-atom conj &amp;#34;hi&amp;#34;) (println &amp;#34;elements: &amp;#34; (count @results-atom)) )) ; done (println &amp;#34;Done. Now have elements: &amp;#34; (count @results-atom)) ) =&amp;gt; doing elements: 1 doing elements: 2 doing elements: 3 Done. Now have elements: 3 nil</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/callbacks-and-async/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/callbacks-and-async/</guid><description>basic callbacks&amp;hellip; (comment &amp;#34;basic callback&amp;#34; (let [callback-fn #(+ 5 %) ] (callback-fn 10)) ) &amp;hellip; user=&amp;gt; (let [callback-fn #(+ 5 %) #_=&amp;gt; ] #_=&amp;gt; (callback-fn 10)) 15 callback w future (comment &amp;#34;future w callback func&amp;#34; (defn use-callback-when-done [callback-fn] (future (callback-fn (+ 4 5)))) (def output (use-callback-when-done #(println &amp;#34;printings.. &amp;#34; % &amp;#34; .end&amp;#34;))) ) =&amp;gt; user=&amp;gt; (def output (use-callback-when-done #(println &amp;#34;printings.. &amp;#34; % &amp;#34; .end&amp;#34;))) #&amp;#39;user/output printings.. 9 .end user=&amp;gt; callback and core async&amp;hellip; (comment &amp;#34;use a go put onto a channel callback.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/clojure_tips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/clojure_tips/</guid><description>(Porting over my notes from gists .. here ),..
quick note on imports i originally inferred this (ns blah-namespace (:use clojure.core.blah ) ; this would take all the terms in blah and put them into the current namespace (:refer-clojure :exclude [blarg flarg]) ; but this is supposed to be a way to avoid term clash ; so blarg and flarg will not be used. (not that they are in clojure.core however) ) Then I read https://www.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/cool-arity-thing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/cool-arity-thing/</guid><description>keys keywords from map (let [ {:keys [status headers body error]} {:status 0 :headers 1 :body 3 :error 5 :extra 88} ] (println status body) ) your.app=&amp;gt; (let [ #_=&amp;gt; {:keys [status headers body error]} {:status 0 :headers 1 :body 3 :error 5 :extra 88} #_=&amp;gt; ] #_=&amp;gt; (println status body) #_=&amp;gt; ) 0 3 nil your.app=&amp;gt; also keyword args arity (comment &amp;#34;&amp;#34; (defn foof [a b &amp;amp; {:keys [op-fn] :or {op-fn +}}] (op-fn a b)) (foof 4 5 :op-fn *) (foof 4 5 :op-fn #(str %1 &amp;#34;.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/debug-and-troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/debug-and-troubleshooting/</guid><description>print data structures so as to preserve quotation (quotes) wow .. took too long to come across this nugget https://stackoverflow.com/questions/21136766/clojure-printing-functions-pr-vs-print pr/prn is to print/println for human readability. user=&amp;gt; (def d1 {:foo {:nil true :and &amp;#34;yay&amp;#34;}}) #&amp;#39;user/d1 user=&amp;gt; (prn &amp;#34;ok... &amp;#34; d1) &amp;#34;ok... &amp;#34; {:foo {:nil true, :and &amp;#34;yay&amp;#34;}} nil</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/devops-and-environment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/devops-and-environment/</guid><description>Dependencies and the repl It appears adding new dependencies into the build.boot file, and then running boot local repl again, downloads required dependencies and makes them useable for in the project.
directory structure for a project
my-project-root/ VERSION build.boot src/ blah/ foo.clj blarth.clj</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/dynamodb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/dynamodb/</guid><description>list tables, first get the faraday class thing ready.
boot.user=&amp;gt; (use &amp;#39;[taoensso.faraday :as dynamo]) with a client-config hash defined in a separate clj file, here one/dynamo.clj is my file.
(def client-config (if (:development env) {:access-key &amp;#34;OMGDEVELOPMENT&amp;#34; :secret-key &amp;#34;I_SHOULD_KEEP_THIS_SECRET!&amp;#34; ; Point the configuration at the DynamoDB Local :endpoint &amp;#34;http://localhost:8000&amp;#34;} {:endpoint &amp;#34;http://dynamodb.us-east-1.amazonaws.com&amp;#34;} ) ) and use list-tables from the module/class thing,
boot.user=&amp;gt; (use &amp;#39;[one.dynamo :as db]) ; `one/dynamo.clj` boot.user=&amp;gt; (dynamo/list-tables db/client-config) (:primes :projects :times) create table to get this env part to work, I didnt see any way to set the env vars in clojure, so I just set them on my shell,</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/file-io/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/file-io/</guid><description>read
(use &amp;#39;clojure.java.io) (with-open [rdr (reader &amp;#34;/tmp/test.txt&amp;#34;)] (doseq [line (line-seq rdr)] (println line))) write (use &amp;#39;clojure.java.io) (with-open [wrtr (writer &amp;#34;/tmp/test.txt&amp;#34;)] (.write wrtr &amp;#34;Line to be written&amp;#34;))</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/futures-promises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/futures-promises/</guid><description>sleeping&amp;hellip; (Thread/sleep 4000) simple multithreading , from the Brave clojure book (future (Thread/sleep 4000) (println &amp;#34;I&amp;#39;ll print after 4 seconds&amp;#34;)) (println &amp;#34;I&amp;#39;ll print immediately&amp;#34;) hmm this is weird. so dereferencing the future blocks? (defn fight-crime [] (let [] (println &amp;#34;hi&amp;#34;) (Thread/sleep 2000) (println &amp;#34;ho&amp;#34;) (Thread/sleep 1000) (println &amp;#34;yo&amp;#34;) 5 )) (let [result (future (fight-crime))] (println &amp;#34;@: &amp;#34; @result) (println &amp;#34;snore. &amp;#34; ) (println &amp;#34;@: &amp;#34; @result) (Thread/sleep 1000) (println &amp;#34;@: &amp;#34; @result) ) Ah ok, but you can stop waiting.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/http-kit-and-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/http-kit-and-timeouts/</guid><description>test http-kit timeout.. look at result for a timeout 1ms.. (require [&amp;#39;org.httpkit.client :as &amp;#39;http]) (let [options {:timeout 1} url &amp;#34;http://yahoo.com&amp;#34; ] (def vout @(http/get url options))) ==&amp;gt; user=&amp;gt; (keys vout) (:opts :error) user=&amp;gt; vout {:opts {:timeout 1, :method :get, :url &amp;#34;http://yahoo.com&amp;#34;}, :error #error { :cause &amp;#34;read timeout: 1ms&amp;#34; :via [{:type org.httpkit.client.TimeoutException :message &amp;#34;read timeout: 1ms&amp;#34; :at [org.httpkit.client.HttpClient clearTimeout &amp;#34;HttpClient.java&amp;#34; 82]}] :trace [[org.httpkit.client.HttpClient clearTimeout &amp;#34;HttpClient.java&amp;#34; 82] [org.httpkit.client.HttpClient run &amp;#34;HttpClient.java&amp;#34; 433] [java.lang.Thread run &amp;#34;Thread.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/interesting-exceptions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/interesting-exceptions/</guid><description>class cast exception clojure.lang.LazySeq cannot be cast to clojure.lang.IFn =&amp;gt; some code is expecting a function, but is getting a LazySeq.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/io-and-streams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/io-and-streams/</guid><description>Amazonica and s3 This was not super obvious, because this example uses a java.io.ByteArrayInputStream with the the :input-stream parameter of the put-object function But in my mind this feels more like an output stream since we&amp;rsquo;re writing. but maybe this is because we&amp;rsquo;re reading from the payload . (require [&amp;#39;amazonica.aws.s3 :as &amp;#39;ss3]) (defn put-s3-obj [bucket-name s3key content] (let [payload (.getBytes content &amp;#34;UTF-8&amp;#34;) input-stream (java.io.ByteArrayInputStream. payload)] (ss3/put-object :bucket-name bucket-name :key s3key :input-stream input-stream ; :metadata {:server-side-encryption &amp;#34;AES256&amp;#34;} ;?</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/library-and-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/library-and-reference/</guid><description>logging, https://github.com/futurice/timbre ; require... [taoensso.timbre :as log] ; i have ended up using it like this, in a let, with fake variables, (let [ var1 (myfunc &amp;#34;blah&amp;#34;) fake1 (log/info (str &amp;#34;var1: &amp;#34; var1))] () ; do stuff)</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/like-zip-in-clojure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/like-zip-in-clojure/</guid><description>I am used to python&amp;rsquo;s zip zip([1, 2, 3], [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]) # [(1, &amp;#39;a&amp;#39;), (2, &amp;#39;b&amp;#39;), (3, &amp;#39;c&amp;#39;)] Interleaving and partitioning can do the same thing From stackoverflow , below, This is so clever &amp;hellip; (partition 2 (interleave &amp;#39;(1 2 3) &amp;#39;(4 5 6))) ; =&amp;gt; ((1 4) (2 5) (3 6)) ; or more generally (defn zip [&amp;amp; colls] (partition (count colls) (apply interleave colls))) (zip &amp;#39;( 1 2 3) &amp;#39;(4 5 6)) ;=&amp;gt; ((1 4) (2 5) (3 6)) (zip &amp;#39;( 1 2 3) &amp;#39;(4 5 6) &amp;#39;(2 4 8)) ;=&amp;gt; ((1 4 2) (2 5 4) (3 6 8)) This was also a cool solution From here user=&amp;gt; (map vector [1 2 3] [4 5 6]) ([1 4] [2 5] [3 6]) user=&amp;gt;</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/more-on-namespaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/more-on-namespaces/</guid><description>? If on a repl, but wanting to simulate a namespace ns in a project file using discussion in https://www.braveclojure.com/organization/#Anchor-3 &amp;hellip; (in-ns &amp;#39;foo.my-test) hmm I thought that would give me access to the names in that namespace, but in my project, that didnt work&amp;hellip; My namespace in .. has (ns foo.my-test (:require [org.httpkit.client :as http] [org.httpkit.fake])) and when i tried &amp;hellip; user=&amp;gt; (in-ns &amp;#39;foo.my-test) #object[clojure.lang.Namespace 0x37b2f7ef &amp;#34;foo.my-test&amp;#34;] foo.my-test=&amp;gt; (org.httpkit.fake/with-fake-http [&amp;#34;http://google.com/&amp;#34; &amp;#34;faked&amp;#34; #_=&amp;gt; &amp;#34;http://flickr.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/oh-plotting-cool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/oh-plotting-cool/</guid><description>from clojure for machine learnings.. (defn plot-points &amp;#34;plots sample points of a solution s&amp;#34; [s] (let [X (concat (:hidden s) (:observed s)) Y (concat (:hidden-values s) (:observed-values s))] (view ; NOTE save instead of view can save to a file. (add-points (xy-plot X Y) (:observed s) (:observed-values s))))) ; namespace... ; [incanter &amp;#34;1.5.4&amp;#34;] (ns my-namespace (:use [incanter.charts :only [xy-plot add-points]] [incanter.core :only [view]]) (:require [clojure.core.matrix.operators :as M] [clatrix.core :as cl])) (ns my-namespace (:use clojure.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/todo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/todo/</guid><description>port my notes from here https://gist.github.com/namoopsoo/fa903799b958ffc9f279cd293e83e9d9 and here https://gist.github.com/namoopsoo/df08c674b4e3e4794e97601682242c51
and here https://gist.github.com/namoopsoo/607f29e923ceaba890588e69293413cf</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/tools.trace-debugging-and-stack-trace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/tools.trace-debugging-and-stack-trace/</guid><description>tools.trace debugging exceptions and stack trace https://github.com/clojure/tools.trace dependency: [org.clojure/tools.trace &amp;quot;0.7.9&amp;quot;] user=&amp;gt; (use &amp;#39;clojure.tools.trace)</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/clojure/unit-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/clojure/unit-testing/</guid><description>hmm&amp;hellip; using is so the library is built in, but you still have to start useing it.. boot.user=&amp;gt; (is (= 4 (+ 2 2))) java.lang.RuntimeException: Unable to resolve symbol: is in this context clojure.lang.Compiler$CompilerException: java.lang.RuntimeException: Unable to resolve symbol: is in this context, compiling:(/var/folders/7_/sbz867_n7bdcdtdry2mdz1z00000gn/T/boot.user2780891586981282255.clj:1:1) boot.user=&amp;gt; boot.user=&amp;gt; boot.user=&amp;gt; (use &amp;#39;clojure.test) nil boot.user=&amp;gt; (is (= 4 (+ 2 2))) true lein test Running all tests in a file lein test module/blah/test_file.py Running specific deftest in module_hmm/blah/test_file.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/docker/hmm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/docker/hmm/</guid><description>Do a build login from shell, $(aws --profile my-local-aws-profile ecr get-login --no-include-email --region us-east-1) build, docker build -t name-of-image -f path/to/Dockerfile path/to/docker/context Run your container # run using an image name, # note that -v takes an absolute path... docker run -i -t -v $(pwd)/local/path:/docker/path &amp;lt;name-of-image&amp;gt;:&amp;lt;tag&amp;gt; # or with a specific image id... say &amp;#34;ad6576e&amp;#34; docker run -d=false -i -t ad6576e If you need your container to have your aws creds Nice hack is to map the &amp;ldquo;root&amp;rdquo; user of your container .</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/eda/f_test_statistic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/eda/f_test_statistic/</guid><description>F test statistic to evaluate the features Also good example at the source Here below, I had a DataFrame , df with some features, f1, f2, f3, f4 and target , y , Based on my results, f3 is great, f4 barely better than random numbers. from sklearn.feature_selection import f_regression, mutual_info_regression def evaluate_feature(df, feature, target): X = np.array(df[feature].tolist()) num_rows = X.shape[0] X = np.reshape(X, (num_rows, 1)) y = df[target].tolist() f_test, _ = f_regression(X, y) print(feature, f_test) num_rows = df.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/eda/variable_independence_techniques/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/eda/variable_independence_techniques/</guid><description>Appreciate this post on helping to choose between a few available tests in determining if there are meaningful relationships between feature data. In particular,
ANOVA compares two variables, where one is categorical (binning is helpful here) and one is continuous. Chi-square is useful for two categorical comparing two cateorical varables, on the other hand. And Pearson Correlation can be used between two continiuous variables But the caveat is that this test assumes both variables are normally distributed And outliers should be chopped off with some preprocessing.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/model/loss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/model/loss/</guid><description>Loss functions vs Metric functions I like the phrasing in this SO answer, that loss functions are optimized directly when training but that metrics are optimized indirectly. I was trying to figure out last year why functions commonly used as metrics (F1 and AUC) are not listed in the tensor flow keras loss functions . I did however earlier try using F1 as a loss function when trying to understand my particular problem.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/model/uncertainty/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/model/uncertainty/</guid><description>mean/std technique For xgboost/random forest type models per this article , the proposed idea is to use the preditions of all the trees as the prediction space or a kind of an uncertainty interval. I wonder if we can say predictions that a model is more certain about have a tighter distribution of predictions. And conversely that a model is unsure about its predictions if the distribution of predictions is wide.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/model/variance_inflation_factor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/model/variance_inflation_factor/</guid><description>Initial stab on interpreting Variance inflation factor (VIF) So far my skim on https://en.wikipedia.org/wiki/Variance_inflation_factor and https://en.wikipedia.org/wiki/Multicollinearity tells me that high Variance Inflation Factor (VIF) indicates high multicolinearity w/ one or more other independent variables. And that’s bad because
(a) when building a linear model (at least using ordinary least squares (OLS) , not yet sure if this is still true if you use regularization ) , the coefficients calculated for the independent variables can change “erratically” given slightly different data .</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/python/fano/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/python/fano/</guid><description>import numpy as np from bokeh.plotting import figure, show, output_file def doplot(x, y, **figure_kwargs): N = x.shape[0] radii = np.array([0.1,]*N) # print &amp;#39;DEBUG, &amp;#39;, radii[:4], &amp;#39;, &amp;#39;, N colors = [ &amp;#34;#%02x%02x%02x&amp;#34; % (int(r), int(g), 150) for r, g in zip(50+2*x, 30+2*y) ] TOOLS=&amp;#34;hover,crosshair,pan,wheel_zoom,zoom_in,zoom_out,box_zoom,undo,redo,reset,tap,save,box_select,poly_select,lasso_select,&amp;#34; p = figure(tools=TOOLS, **figure_kwargs) p.scatter(x, y, radius=radii, fill_color=colors, fill_alpha=0.6, line_color=None) output_file(&amp;#34;color_scatter.html&amp;#34;) show(p) # open a browser def make_data(N=100, trials=1000, minmax=(0, 1)): a, b = minmax data = [[sum(vec), fano(vec)] for vec in [a + (b - a)*np.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/python/poormans_pomodoro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/python/poormans_pomodoro/</guid><description>import sys import time import datetime file = sys.stderr def log(logfile, tag): now = datetime.datetime.now().strftime(&amp;#39;%Y-%m-%d %H:%M EST&amp;#39;) with open(logfile, &amp;#39;a&amp;#39;) as fd: fd.write(f&amp;#39;{now} {tag}\n&amp;#39;) def do(minutes, logfile, tag): log(logfile, f&amp;#39;{tag} start&amp;#39;) seconds = minutes*60 for i in range(seconds): file.flush() #s = str(i%60).zfill(2) file.write(f&amp;#39;\r{i//60}:{str(i%60).zfill(2)}&amp;#39;) time.sleep(1) log(logfile, f&amp;#39;{tag} end&amp;#39;) And choose any logfile location and any tag ..</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/python/profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/python/profiling/</guid><description>line profiler Big fan of the line_profiler ( formerly here ) pip install line_profiler expensive.py import time @profile def foo(): for x in range(10): bar() flarg() @profile def bar(): time.sleep(.1) @profile def flarg(): time.sleep(.1) foo() profile (pandars38) ツ kernprof -lv expensive.py Wrote profile results to expensive.py.lprof Timer unit: 1e-06 s Total time: 2.06251 s File: expensive.py Function: foo at line 3 Line # Hits Time Per Hit % Time Line Contents ============================================================== 3 @profile 4 def foo(): 5 11 54.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/rc/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/rc/readme/</guid><description> Download MacVIM from macvim github ( which was forked from here originally I think ) mkdir -p ~/.vim/pack/themes/opt/ cd ~/.vim/pack/themes/opt/ git clone git@github.com:lifepillar/vim-solarized8.git</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/sql/user_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/sql/user_management/</guid><description>Create a new user username = &amp;#39;new_user_foo&amp;#39; passw = input() sql = &amp;#34;CREATE USER {} WITH PASSWORD &amp;#39;{}&amp;#39; &amp;#34;.format(username, passw) Make some quick grants tables = [&amp;#39;table1&amp;#39;, &amp;#39;table_foo&amp;#39;, ] username = &amp;#39;xx&amp;#39; grant_queries = [q.format(username) for q in [&amp;#34;GRANT CONNECT ON DATABASE mydb TO {}&amp;#34;, &amp;#34;GRANT USAGE ON SCHEMA public TO {}&amp;#34;,] + [&amp;#34;GRANT SELECT ON {} TO &amp;#34;.format(t) + &amp;#34; {} &amp;#34; for t in tables]] check exissting users select * from pg_user update user password ; change ALTER USER user_name WITH PASSWORD &amp;#39;new_password&amp;#39;; can use input() here too actually Check Existing Grants The user running this query might not be able to see all the rows SELECT table_catalog, table_schema, table_name, privilege_type, grantee FROM information_schema.</description></item><item><title/><link>https://michal.piekarczyk.xyz/handy/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/tools/</guid><description>ag the silver searcher here usually the_silver_searcher on homebrew jq command line json parsing here markdown to pdf With pandoc (I used brew install pandoc ). And thanks stackoverflow , pandoc MANUAL.md -o example13.pdf documentation from markdown to latex pandoc -f markdown -t latex hello.txt Even --toc, --table-of-contents , --toc-depth=NUMBER , for automatic table of contents.
Specifically for double spaced output pdf this stackoverflow tip was amazing, to create a file like options.</description></item><item><title>plot handies</title><link>https://michal.piekarczyk.xyz/handy/plot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/plot/</guid><description>histogram overlays # Nice technique from https://srome.github.io/Covariate-Shift,-i.e.-Why-Prediction-Quality-Can-Degrade-In-Production-and-How-To-Fix-It/ # ... put two histograms on same plot ... def produce_overlayed_hists_for_col_dfs(col, dfs): fig = plt.figure(figsize=(12,12)) ax = fig.add_subplot(121) ax.hist(dfs[0][1][col], color=&amp;#39;r&amp;#39;, alpha=0.2, bins=50) ax.hist(dfs[1][1][col], color=&amp;#39;b&amp;#39;, alpha=0.2, bins=50) ax.set(title=f&amp;#39;{dfs[0][0]} (red) vs {dfs[1][0]} (blue)&amp;#39;, ylabel=col) Basic goal looks like the below.
sparse diagonal x axis ticks import matplotlib.pyplot as plt import pandas as pd import datetime def make_xtick_labels(x, step=5): &amp;#39;&amp;#39;&amp;#39;Given x, step the labels every &amp;lt;step&amp;gt; Aka, take every &amp;lt;step&amp;gt;th x label &amp;#39;&amp;#39;&amp;#39; x_ticks = [i for i in range(len(x)) if i % step == 0] x_labels = [x[i] for i in x_ticks] return x_ticks, x_labels Did not add an example x , y yet, but showing an example where x contains dates and y is numeric.</description></item><item><title>sql handies</title><link>https://michal.piekarczyk.xyz/handy/sql/hmm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://michal.piekarczyk.xyz/handy/sql/hmm/</guid><description>List indexes From here SELECT tablename, indexname, indexdef FROM pg_indexes WHERE schemaname = &amp;#39;public&amp;#39; ORDER BY tablename, indexname; Disk Usage per table from the postgresql wiki except one minor change &amp;hellip; for ('user_blah', 'user_blar', 'schema1', 'schema2') schemas only &amp;hellip; SELECT *, pg_size_pretty(total_bytes) AS total , pg_size_pretty(index_bytes) AS INDEX , pg_size_pretty(toast_bytes) AS toast , pg_size_pretty(table_bytes) AS TABLE FROM ( SELECT *, total_bytes-index_bytes-COALESCE(toast_bytes,0) AS table_bytes FROM ( SELECT c.oid,nspname AS table_schema, relname AS TABLE_NAME , c.</description></item></channel></rss>